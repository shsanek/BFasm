
jmp 64; # 0 2;

#start block skipSpace;
push r0; # 2 1;

#start block :3;
input r0; # 3 1;
cmp r0, 32; # 4 2;
j== 3; # 6 2;
cmp r0, 10; # 8 2;
j== 3; # 10 2;
cmp r0, 9; # 12 2;
j== 3; # 14 2;
resIn; # 16 1;
pop r0; # 17 1;
ret; # 18 1;

#start block printInt10;
push r0; # 19 1;
push r1; # 20 1;
mov r0, s0; # 21 1;
mov r1, 0; # 22 2;
fPush 10; # 24 2;

#start block :26;
div r0, 10; # 26 2;
cmp r0; # 28 1;
j> 26; # 29 2;

#start block :31;
fPop r0; # 31 1;
cmp r0, 10; # 32 2;
j== 41; # 34 2;
add r0, 48; # 36 2;
out r0; # 38 1;
jmp 31; # 39 2;
pop r1; # 41 1;
pop r0; # 42 1;
ret; # 43 1;

#start block readInt10;
push r1; # 44 1;
mov r0, 0; # 45 2;

#start block :47;
input r1; # 47 1;
sub r1, 48; # 48 2;
j< 61; # 50 2;
cmp r1, 9; # 52 2;
j> 61; # 54 2;
mul r0, 10; # 56 2;
add r0, r1; # 58 1;
jmp 47; # 59 2;
resIn; # 61 1;
pop r1; # 62 1;
ret; # 63 1;

#start block main;
out 105; # 64 2;
out 58; # 66 2;
call 2; # 68 2;
call 44; # 70 2;
out 10; # 72 2;
out 111; # 74 2;
out 58; # 76 2;
mov r3, r0; # 78 1;
mov r0, 1; # 79 2;
mov r5, 0; # 81 2;

#start block :83;
sub r3, 1; # 83 2;
j== 114; # 85 2;
inc r0; # 87 1;
mov r1, r5; # 88 1;

#start block :89;
sub r1, 1; # 89 2;
j< 105; # 91 2;
get r4, r1; # 93 1;
mov r2, r0; # 94 1;
mod r2, r4; # 95 1;
sub r2; # 96 1;
j== 112; # 97 2;
sub s0, 2; # 99 2;
j=< 105; # 101 2;
jmp 89; # 103 2;
#save=105;
inc r5; # 105 1;
push r0; # 106 1;
mov s0, r0; # 107 1;
call 19; # 108 2;
out 32; # 110 2;
#notSave=112;
jmp 83; # 112 2;
exit 0; # 114 2;
run